#!/bin/sh

export BUILDPACK_TEST_RUNNER_HOME=$(cd $(dirname $0); cd ..; pwd)

max()
{
  if [ $1 -gt $2 ]; then
    echo $1
  else
    echo $2
  fi
}

if [ 0 -eq $# ]; then
  cat <<EOF
Buildpack Test Runner

Usage: run [-c] buildpack_1 [buildpack_2 [...]]

         -c   enable cUrl caching
buildpack_n  local directory or a remote Git repository ending in .git for buildpack
EOF
  exit 1
fi

if [ "${1}" = "-c" ]; then
  shift
  export PATH=${BUILDPACK_TEST_RUNNER_HOME}/lib/magic_curl/bin:${PATH}
fi

all_start_time="$(date +%s)"
exit_code=0
for bp in ${@}; do
  echo "${bp}" | grep -q -e ".*\.git$"
  if [ 0 -eq $? ]; then
    tmp_repo="$(mktemp -d /tmp/heroku_buildpack_testrunner_tmp_repo.XXXX)"
    git clone ${bp} ${tmp_repo}
    bp=${tmp_repo}
  fi
    
  if [ ! -d ${bp} ]; then
    echo "${bp} is not a directory" >&2
    exit_code=$(max ${exit_code} 1)
    continue
  fi

  if [ -z "$(ls ${bp}/test/*_test.sh 2>/dev/null)" ]; then
    echo "Buildpack '${bp}' does not contain valid tests. Must contain a 'test' directory and with files matching '*_test.sh'" >&2
    exit_code=$(max ${exit_code} 1)
    continue
  fi

  bp_start_time="$(date +%s)"
  echo "\nRunning tests for buildpack '${bp}'"
  export BUILDPACK_HOME=${bp}

  for f in ${BUILDPACK_HOME}/test/*_test.sh; do
    suite_start_time="$(date +%s)"

    echo "Running test suite '${f}'"
    ${SHUNIT_HOME?"'SHUNIT_HOME' environment variable must be set"}/src/shunit2 ${f}
    exit_code=$(max ${exit_code} $?)

    suite_end_time="$(date +%s)"
    suite_elapsed_time="$(expr ${suite_end_time} - ${suite_start_time})"
    echo "Completed test suite '${f}' in ${suite_elapsed_time} seconds\n"
  done
  bp_end_time="$(date +%s)"
  bp_elapsed_time="$(expr ${bp_end_time} - ${bp_start_time})"
  echo "Completed tests in '${bp}' in ${bp_elapsed_time} seconds"

  if [ -d ${tmp_repo} ]; then
    rm -rf ${tmp_repo}
  fi
done

all_end_time="$(date +%s)"
all_elapsed_time="$(expr ${all_end_time} - ${all_start_time})"
echo "\nCompleted all buildpack tests in ${all_elapsed_time} seconds"

exit ${exit_code}
